#include <cstdio>
#include <deque>
#include <vector>
using namespace std;

struct edge {
	int node;
	int weight;
};
vector<struct edge> adjList[1000];
int dijInfo[1000];
deque<int> queue;
int Dijkstra(int N,int source) {
	int i;
	for (i = 0; i < N; i++) dijInfo[i] = -1;

	dijInfo[source] = 0;
	queue.push_back(source);

	int u;
	int minIndex;
	int alt;
	while (queue.size() > 0) {
		u = queue.back();
		minIndex = queue.size()-1;
		for (i = 0; i < (queue.size()-1); i++) {
			if (dijInfo[queue[i]] < dijInfo[u]) {
				minIndex = i;
				u = queue[i];
			}
		}
		queue[minIndex] = queue.back();
		queue.pop_back();

		for (i = 0; i < adjList[u].size(); i++) {
			int n[2];
			n[0] = adjList[u][i].node;
			n[1] = adjList[u][i].weight;

			if (dijInfo[n[0]] == -1) {
				dijInfo[n[0]] = dijInfo[u] + n[1];
				queue.push_back(n[0]);
			}
			else {
				alt = dijInfo[u] + n[1];
				if (alt < dijInfo[n[0]]) {
					dijInfo[n[0]] = alt;
				}
			}
		}
	}

	return 0;
}

int main() {
	int i;
	int N,M;
	int u,v,w;
	scanf("%d %d",&N,&M);
	for (i = 0; i < M; i++) {
		scanf("%d %d %d",&u,&v,&w);
		adjList[u-1].push_back({v-1,w});
		adjList[v-1].push_back({u-1,w});
	}

	Dijkstra(N,0);
	for (i = 0; i < N; i++) printf("%d\n",dijInfo[i]);

	return 0;
}

/*
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define SIZE 20000+5
#define INF 1e9

ll dist[SIZE];
vector< pair<ll, ll> > adj[SIZE];
priority_queue< pair<ll,ll> > pq;
ll N, M, A, B, L;

void dijkstra(ll start)
{
    for(int i=1; i<=N; i++)
        dist[i] = INF;
    pq.push(make_pair(0,start));
    while(!pq.empty()){
        pair<ll, ll> edge = pq.top();
        pq.pop();
        if(dist[edge.second]==INF){
            dist[edge.second] = -edge.first;
            for(pair<ll, ll> edge2 : adj[edge.second])
                pq.push(make_pair(edge.first-edge2.first, edge2.second));
        }
    }
}

int main()
{
    scanf("%lld%lld",&N,&M);
    for(int i=0; i<M; i++){
        scanf("%lld%lld%lld",&A,&B,&L);
        adj[A].push_back(make_pair(L,B));
        adj[B].push_back(make_pair(L,A));
    }
    dijkstra(1);

    for(int i=1; i<=N; i++){
        if(dist[i]==INF)    
            cout << -1 << endl;
        else    
            cout << dist[i] << endl;
    }
    return 0;
}
*//////
